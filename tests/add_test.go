package tests

import (
	"calendarbot/handlers"
	"calendarbot/utils"

	"fmt"
	"testing"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	_ "github.com/mattn/go-sqlite3"
	"go.uber.org/zap"
)

var testHandleAddNoteCommandSuccessfulParams = []struct {
	date string
	note string
}{
	{"22 January 2021, 00:00", "Test note"},
	{"19 February 0001, 00:00", "–¢–µ—Å—Ç –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ"},
	{"01 March 9999, 00:00", "ÿßÿÆÿ™ÿ®ÿßÿ± ÿπŸÑŸâ ÿßŸÑŸÑÿ∫ÿ© ÿßŸÑÿπÿ±ÿ®Ÿäÿ©"},
	{"30 April 0721, 00:00", "‰∏≠ÊñáÊ∏¨Ë©¶"},
	{"07 May 1919, 00:00", "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤ –ú–æ—Å–∫–≤–∞ –ú–æ—Å–∫–≤–∞ —É–ª–∏—Ü–∞ –õ–µ–Ω–∏–Ω–∞ –º–µ—Ç—Ä–æ ‚ìÇ –ø—Ä–æ—Å–ø–µ–∫—Ç –í–µ—Ä–Ω–∞–¥—Å–∫–æ–≥–æ üòÅ"},
	{"15 June 7070, 00:00", "–•–í–û–°–¢ –£–î–ê–ß–ò ‚Äì –ë–õ–ê–ì–û–¢–í–û–†–ò–¢–ï–õ–¨–ù–´–ô –ü–†–û–ï–ö–¢, –ö–û–¢–û–†–´–ô –°–û–ó–î–ê–ù –î–õ–Ø –ü–û–ú–û–©–ò –î–û–ú–ê–®–ù–ò–ú –ü–ò–¢–û–ú–¶–ê–ú –ò –ò–• –•–û–ó–Ø–ï–í–ê–ú. –ò—Å–∫–∞—Ç—å –ø–æ —Ñ–æ—Ç–æ      –û–±—ä—è–≤–ª–µ–Ω–∏—è     –í –¥–æ–±—Ä—ã–µ —Ä—É–∫–∏     –°–ú–ò –æ –Ω–∞—Å     –û –ø—Ä–æ–µ–∫—Ç–µ      –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ     –í–æ–π—Ç–∏         –û–±—ä—è–≤–ª–µ–Ω–∏—è     –í –¥–æ–±—Ä—ã–µ —Ä—É–∫–∏     –°–ú–ò –æ –Ω–∞—Å     –û –ø—Ä–æ–µ–∫—Ç–µ  –ò—Å–∫–∞—Ç—å –ø–æ —Ñ–æ—Ç–æ –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –£–º–Ω—ã–π –ø–æ–∏—Å–∫ –¥–æ–º–∞—à–Ω–∏—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö –£–º–Ω—ã–π –ø–æ–∏—Å–∫ –¥–æ–º–∞—à–Ω–∏—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö  –ù–∞–π–¥–∏ –ø–∏—Ç–æ–º—Ü–∞ –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ú–æ–π –ø–∏—Ç–æ–º–µ—Ü –ø–æ—Ç–µ—Ä—è–ª—Å—è –ú–æ–π –ø–∏—Ç–æ–º–µ—Ü –ø–æ—Ç–µ—Ä—è–ª—Å—è  –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–ø–∞–∂–µ –ø–∏—Ç–æ–º—Ü–∞, —á—Ç–æ–±—ã –≤—Å–µ —É–≤–∏–¥–µ–ª–∏ –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ù–∞–π–¥–µ–Ω —á—É–∂–æ–π –ø–∏—Ç–æ–º–µ—Ü –ù–∞–π–¥–µ–Ω —á—É–∂–æ–π –ø–∏—Ç–æ–º–µ—Ü  –í—ã –Ω–∞—à–ª–∏ —á—É–∂–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ –∏ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –û –Ω–∞—Å –≥–æ–≤–æ—Ä—è—Ç –ü–µ—Ä–µ–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª –û –Ω–∞—Å –û –Ω–∞—Å  –ù–∞—à–∞ —É–º–Ω–∞—è –¥–æ—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –ø—Ä–æ–ø–∞–≤—à–∏—Ö —Å–æ–±–∞–∫ –∏ –∫–æ—à–µ–∫. –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏ —É–¥–æ–±–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–∏—Ç–æ–º—Ü–µ–≤ —Å –ø–æ–º–æ—â—å—é –ø—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ï—Å–ª–∏ –≤ –±–∞–∑–µ –µ—Å—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ –ø—Ä–æ–ø–∞–∂–µ –∏ –Ω–∞—Ö–æ–¥–∫–µ —Å —Ñ–æ—Ç–æ –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ, –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –±—É–¥—É—Ç —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.  –ú—ã —Ö–æ—Ç–∏–º, —á—Ç–æ–±—ã –ª—é–¥–∏ –±–æ–ª–µ–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –æ—Ç–Ω–æ—Å–∏–ª–∏—Å—å –∫ —Å–≤–æ–∏–º –ø–∏—Ç–æ–º—Ü–∞–º, –∞ –æ–±—â–µ—Å—Ç–≤–æ —Å—Ç–∞–ª–æ –±–æ–ª–µ–µ –≥—É–º–∞–Ω–Ω—ã–º. –ò –≥–æ—Ç–æ–≤—ã –≤ —ç—Ç–æ–º –ø–æ–º–æ—á—å. –ó–∞–±–æ—Ç–∏—Ç—å—Å—è ‚Äì –ª–µ–≥–∫–æ: –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ –º–∏–º–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –ø—Ä–æ–µ–∫—Ç—É. –í–º–µ—Å—Ç–µ –º—ã —Å–¥–µ–ª–∞–µ–º –º–∏—Ä –ª—É—á—à–µ! –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏  –ò –±—É–¥—å—Ç–µ –≤ –∫—É—Ä—Å–µ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π –∏–∑ –º–∏—Ä–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π  –û—Ç–ø—Ä–∞–≤–ª—è—è —Ñ–æ—Ä–º—É, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ subscribe –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç 011–ü–æ–∏—Å–∫ –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ü–æ–∏—Å–∫ –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏  –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ –ø–æ —Ñ–æ—Ç–æ! –í–æ–∑–º–æ–∂–Ω–æ, –ø–∏—Ç–æ–º–µ—Ü –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –∏—â–µ—Ç–µ, —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π. 022C–æ–∑–¥–∞–π—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ C–æ–∑–¥–∞–π—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ  –°–æ–∑–¥–∞–π—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–ø–∞–≤—à–µ–º –∏–ª–∏ –Ω–∞–π–¥–µ–Ω–Ω–æ–º –ø–∏—Ç–æ–º—Ü–µ. –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ! 033–ò–ò –ø–æ–¥–±–µ—Ä–µ—Ç –ø–∏—Ç–æ–º—Ü–∞ –ò–ò –ø–æ–¥–±–µ—Ä–µ—Ç –ø–∏—Ç–æ–º—Ü–∞  –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –ø–æ–¥–±–µ—Ä–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –ø–æ—Ö–æ–∂–∏–º–∏ –ø–∏—Ç–æ–º—Ü–∞–º–∏. 04–ü–∏—Ç–æ–º–µ—Ü –≤–µ—Ä–Ω—É–ª—Å—è! –ü–∏—Ç–æ–º–µ—Ü –≤–µ—Ä–Ω—É–ª—Å—è!  –ü–∏—Ç–æ–º–µ—Ü –≤–µ—Ä–Ω—É–ª—Å—è –¥–æ–º–æ–π. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –º–∏—Ä –ª—É—á—à–µ! leftright –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –ò—Å–∫–∞—Ç—å –ø–æ —Ñ–æ—Ç–æ –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –û—Ç–¥–∞—Ç—å –∏–ª–∏ –≤–∑—è—Ç—å –≤ –¥–æ–±—Ä—ã–µ —Ä—É–∫–∏  –ù–∞—à —Å–µ—Ä–≤–∏—Å –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–π—Ç–∏ –∏–ª–∏ –æ—Ç–¥–∞—Ç—å –ø–∏—Ç–æ–º—Ü–∞ –≤ –¥–æ–±—Ä—ã–µ —Ä—É–∫–∏. –û—Ç–¥–∞—Ç—å –ø–∏—Ç–æ–º—Ü–∞ –≤ –¥–æ–±—Ä—ã–µ —Ä—É–∫–∏ –û—Ç–¥–∞—Ç—å –ø–∏—Ç–æ–º—Ü–∞ –≤ –¥–æ–±—Ä—ã–µ —Ä—É–∫–∏  –í—ã —Ä–µ—à–∏–ª–∏ –æ—Ç–¥–∞—Ç—å —Å–≤–æ–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ –¥—Ä—É–≥–æ–º—É —Ö–æ–∑—è–∏–Ω—É? –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –í–∑—è—Ç—å –ø–∏—Ç–æ–º—Ü–∞ –≤ –¥–æ–±—Ä—ã–µ —Ä—É–∫–∏ –í–∑—è—Ç—å –ø–∏—Ç–æ–º—Ü–∞ –≤ –¥–æ–±—Ä—ã–µ —Ä—É–∫–∏  –í—ã –Ω–∞–∫–æ–Ω–µ—Ü —Ä–µ—à–∏–ª–∏ –≤–∑—è—Ç—å –ø–∏—Ç–æ–º—Ü–∞ –∫ —Å–µ–±–µ –¥–æ–º–æ–π? –í–∑—è—Ç—å –ø–∏—Ç–æ–º—Ü–∞ –í–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç –ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –ø—Ä–æ–ø–∞–ª–∞ —Å–æ–±–∞–∫–∞? –ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –ø—Ä–æ–ø–∞–ª–∞ –∫–æ—à–∫–∞? –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–∞–∑–æ–π –æ–±—ä—è–≤–ª–µ–Ω–∏–π? –ö–∞–∫–æ–π –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è, —á—Ç–æ–±—ã –≤—ã —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ —Å–æ–±–∞–∫—É –∏–ª–∏ –∫–æ—à–∫—É –ø–æ —Ñ–æ—Ç–æ? –ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –ø–æ–∏—Å–∫ –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–∞–ª? –ß–µ–º –ø—Ä–æ–µ–∫—Ç ¬´–•–≤–æ—Å—Ç —É–¥–∞—á–∏¬ª –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –¥—Ä—É–≥–∏—Ö –¥–æ—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –ø–æ–∏—Å–∫—É –¥–æ–º–∞—à–Ω–∏—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö? –ö–∞–∫–∏—Ö –¥–æ–º–∞—à–Ω–∏—Ö –ø–∏—Ç–æ–º—Ü–µ–≤ —è –º–æ–≥—É –ø–æ–∏—Å–∫–∞—Ç—å –ø–æ —Ñ–æ—Ç–æ? –ß—Ç–æ –µ—â–µ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –∂–∏–≤–æ—Ç–Ω—ã–º? –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏  –ò –±—É–¥—å—Ç–µ –≤ –∫—É—Ä—Å–µ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π –∏–∑ –º–∏—Ä–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π  –û—Ç–ø—Ä–∞–≤–ª—è—è —Ñ–æ—Ä–º—É, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ subscribe  –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã –∏ –æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –¥–µ–π—Å—Ç–≤—É—é—â–∏–º –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º –†–§.  –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–∞–π—Ç–∞ –Ω–µ –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ì–û–ó–ù–ê–ö –†–ö–§ –†–ö–§  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø—Ä–æ–µ–∫—Ç–∞      –û–±—ä—è–≤–ª–µ–Ω–∏—è     –°–ú–ò –æ –Ω–∞—Å     –í –¥–æ–±—Ä—ã–µ —Ä—É–∫–∏     –û –ø—Ä–æ–µ–∫—Ç–µ     –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ     –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å      https://vk.com/club206650352  ¬© 2023 –ê–û ¬´–ì–û–ó–ù–ê–ö¬ª. –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏  –ù–∞ —Å–∞–π—Ç–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ñ–∞–π–ª—ã cookie  –û—Å—Ç–∞–≤–∞—è—Å—å –Ω–∞ —Å–∞–π—Ç–µ, –≤—ã –≤—ã—Ä–∞–∂–∞–µ—Ç–µ —Å–≤–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –ê–û ¬´–ì–û–ó–ù–ê–ö¬ª –∏ —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ cookie"},
	{"07 July 0090, 00:00", ";;;;–ê –∫–∞–∫ —Ç–µ–±–µ;—Ç–∞–∫–æ–µ;–ò–ª–æ–Ω;–ú–∞—Å–∫?"},
	{"22 August 2021, 00:00", "ÍØÜÍØ•ÍØèÍØÖÍØ§ÍØñÍØóÍØ• ÍØáÍØ¶ÍØÅÍØ≠ÍØ† ÍØáÍØßÍØïÍØ•ÍØ´"},
	{"22 September 1010, 00:00", "·ÉÆ·Éê·É≠·Éê·Éû·É£·É†·Éò ·Éò·Éß·Éò·Éì·Éî ·Éò·Éê·É§·Éê·Éì ·É´·Éê·Éö·Éò·Éê·Éú ·Éí·Éî·Éõ·É†·Éò·Éî·Éö·Éò"},
	{"22 October 2021, 00:00", "ÍØÜÍØ•ÍØèÍØÖÍØ§ÍØñÍØóÍØ• ÍØáÍØ¶ÍØÅÍØ≠ÍØ† ÍØáÍØßÍØïÍØ•ÍØ´"},
	{"22 November 2021, 00:00", "·Ä°·ÄÑ·Ä∫·Ä∏ ·Äí·Ä´·ÄÜ·Ä≠·ÄØ ·Äò·Äö·Ä∫·Äú·Ä≠·ÄØ·Äú·Ä≤·Åã"},
	{"15 December 0021, 00:00", "ŸÖŸÜ ÿ≤ŸÜÿØ⁄Ø€å ŸÖ€å ⁄©ŸÜŸÖ - ÿ®ŸÜÿßÿ®ÿ±ÿß€åŸÜ Ÿàÿ¨ŸàÿØ ÿØÿßÿ±ŸÖ"},
	{"9999-12-29 23:59", "ŸÖŸÜ ÿ≤ŸÜÿØ⁄Ø€å ŸÖ€å ⁄©ŸÜŸÖ - ÿ®ŸÜÿßÿ®ÿ±ÿß€åŸÜ Ÿàÿ¨ŸàÿØ ÿØÿßÿ±ŸÖ"},
}

func testHandleAddNoteCommandSuccessful(date string, note string, t *testing.T) {
	db, err := utils.InitDB("test.db")
	if err != nil {
		t.Fatalf("Failed to open mock database: %v", err)
	}
	defer db.Close()
	db.SetMaxOpenConns(1)

	message := &tgbotapi.Message{
		Chat: &tgbotapi.Chat{ID: 123},
		Text: fmt.Sprintf("/add %s ; %s", date, note),
		Entities: []tgbotapi.MessageEntity{
			{
				Type:   "bot_command",
				Offset: 0,
				Length: 4,
			},
		},
		From: &tgbotapi.User{
			ID: 12345,
		},
	}

	logger, err := zap.NewProduction()
	if err != nil {
		panic(err)
	}

	err = handlers.HandleAddNoteCommand(logger, nil, db, message)
	if err != nil {
		t.Fatalf("HandleAddNoteCommand (/add) returned an error: %v", err)
	}

	// Check that the note was added to the mock database
	rows, err := db.Query("SELECT note FROM notes WHERE user_id = ?", message.From.ID)
	if err != nil {
		t.Fatalf("Failed to query mock database: %v", err)
	}
	defer rows.Close()

	if !rows.Next() {
		t.Errorf("HandleAddNoteCommand did not add note to database")
	}

	for rows.Next() {
		var res_note string
		err = rows.Scan(&res_note)
		if err != nil {
			t.Errorf("Error while reading SELECT content: %v", err)
		}
		if res_note != note {
			t.Errorf("Expected %s as note, but got %s", note, res_note)
		}
	}

	_, err = db.Exec("DROP TABLE users")
	if err != nil {
		t.Fatalf("Failed to drop table from mock database: %v", err)
	}
	_, err = db.Exec("DROP TABLE notes")
	if err != nil {
		t.Fatalf("Failed to drop table from mock database: %v", err)
	}
	_, err = db.Exec("DROP TABLE permissions")
	if err != nil {
		t.Fatalf("Failed to drop table from mock database: %v", err)
	}
}

func TestHandleAddNoteCommandSuccessful(t *testing.T) {
	for _, tt := range testHandleAddNoteCommandSuccessfulParams {
		testHandleAddNoteCommandSuccessful(tt.date, tt.note, t)
	}
}

var testHandleAddNoteCommandDateParseFailParams = []struct {
	date string
}{
	{"02/17/2009"},
	{"17/02/2009"},
	{"2009/02/17"},
	{"February 17, 2009"},
	{"2/17/2009"},
	{"17/2/2009"},
	{"2009/2/17"},
	{" 2/17/2009"},
	{"17/ 2/2009"},
	{"2009/ 2/17"},
	{"02172009"},
	{"Feb172009"},
	{"17 February, 2009"},
	{"17 Feb 2009"},
	{"99 April 9999"},
	{"-1 April 9999"},
	{"00 April 9999"},
	{"01 April 0"},
	{"01 –ê–ø—Ä–µ–ª—è 2024"},
	{"‰∫å„Äá‰∫å‰∫åÂπ¥‰∏Ä„ÄáÊúà‰∫å‰∫åÊó•"},
}

func testHandleAddNoteCommandDateParseFail(date string, t *testing.T) {
	logger, err := zap.NewProduction()
	if err != nil {
		panic(err)
	}

	note := "Test note"

	// Create a mock message
	message := &tgbotapi.Message{
		Chat: &tgbotapi.Chat{ID: 123},
		Text: fmt.Sprintf("/add %s ; %s", date, note),
		Entities: []tgbotapi.MessageEntity{
			{
				Type:   "bot_command",
				Offset: 0,
				Length: 4,
			},
		},
		From: &tgbotapi.User{
			ID: 12345,
		},
	}

	err = handlers.HandleAddNoteCommand(logger, nil, nil, message)
	if err == nil {
		t.Fatalf("HandleAddNoteCommand (/add) does not return an error: %v", err)
	}
}

func TestHandleAddNoteCommandDateParseFail(t *testing.T) {
	for _, tt := range testHandleAddNoteCommandDateParseFailParams {
		testHandleAddNoteCommandDateParseFail(tt.date, t)
	}
}

// Uncomment for test locally
// func TestMain(t *testing.T) {
// 	// Create a context with a 1 second timeout.
// 	ctx, cancel := context.WithTimeout(context.Background(), time.Second)

// 	defer run.Run()

// 	// Wait for the goroutine to finish or timeout.
// 	select {
// 	case <-ctx.Done():
// 		// The goroutine has not finished, so it must have been stopped by the timeout.
// 		t.Errorf("goroutine did not finish within 1 second")
// 	default:
// 		// The goroutine finished before the timeout expired.
// 	}

// 	// Cancel the context to prevent any goroutines that are still running from being leaked.
// 	cancel()
// }
